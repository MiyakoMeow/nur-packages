name: Auto Update Packages via updateScript
on:
  schedule:
    - cron: "0 12 * * *" # 每天 UTC 中午12点运行
  workflow_dispatch: # 允许手动触发

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      package_list: ${{ steps.package-list.outputs.package_list }}
      package_count: ${{ steps.package-list.outputs.package_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            substituters = https://miyakomeow.cachix.org/ https://nix-community.cachix.org/ https://cache.nixos.org/
            trusted-public-keys = miyakomeow.cachix.org-1:85k7pjjK1Voo+kMHJx8w3nT1rlBow3+4/M+LsAuMCRY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=

      - name: Install dependencies
        run: |
          # 安装必要工具
          nix profile add nixpkgs#curl nixpkgs#jq nixpkgs#python3 nixpkgs#nix-update

      - name: Find packages with updateScript
        id: package-list
        shell: bash
        run: |
          # 使用Nix内置方法检测updateScript
          export NIXPKGS_ALLOW_UNFREE=1
          nix eval --impure --json .#packages.x86_64-linux --apply 'builtins.attrNames' | jq -r '.[]' > all-packages.txt

          # 创建空包列表文件
          echo "" > package-list.txt

          # 声明关联数组用于命令去重
          declare -A unique_commands

          # 过滤出有updateScript的包，并进行命令去重
          while IFS= read -r pkg; do
            # 尝试获取updateScript
            set +e
            script_output=$(nix eval --impure --json ".#${pkg}.updateScript" 2>/tmp/error.log)
            ret=$?
            set -e

            if [ $ret -ne 0 ]; then
              continue
            fi

            # 检查输出类型并标准化为命令数组
            script_type=$(echo "$script_output" | jq -r 'type')
            command_fingerprint=""

            case "$script_type" in
              "array")
                # 数组类型：直接排序
                command_fingerprint=$(echo "$script_output" | jq -c 'sort')
                ;;
              "string")
                # 字符串类型：转换为单元素数组
                command_fingerprint=$(echo "$script_output" | jq -c '[.] | sort')
                ;;
              "object")
                # 属性集类型：检查是否有command字段
                if echo "$script_output" | jq -e 'has("command")' >/dev/null; then
                  command_type=$(echo "$script_output" | jq -r '.command | type')
                  if [ "$command_type" = "array" ]; then
                    # 提取command数组并排序
                    command_fingerprint=$(echo "$script_output" | jq -c '.command | sort')
                  elif [ "$command_type" = "string" ]; then
                    # 字符串command转换为单元素数组
                    command_fingerprint=$(echo "$script_output" | jq -c '.command | [.] | sort')
                  fi
                fi
                ;;
            esac

            # 跳过无法识别的格式
            if [ -z "$command_fingerprint" ]; then
              echo "跳过包 $pkg (不支持的updateScript格式: $script_type)"
              continue
            fi

            # 检查命令是否已存在
            if [[ -z "${unique_commands[$command_fingerprint]}" ]]; then
              # 新命令，记录到列表
              unique_commands["$command_fingerprint"]=1
              echo "$pkg" >> package-list.txt
            else
              echo "跳过包 $pkg (重复命令: ${command_fingerprint})"
            fi
          done < all-packages.txt

          # 输出包列表和数量
          echo "找到 $(wc -l < package-list.txt) 个需要更新的包:"
          cat package-list.txt

          # 设置输出变量
          echo "package_list=$(cat package-list.txt | jq -R -s -c 'split("\n") | map(select(. != ""))')" >> $GITHUB_OUTPUT
          echo "package_count=$(wc -l < package-list.txt | awk '{print $1}')" >> $GITHUB_OUTPUT

  update-package:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.prepare.outputs.package_list) }}
    outputs:
      packages: ${{ steps.collect.outputs.packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            substituters = https://miyakomeow.cachix.org/ https://nix-community.cachix.org/ https://cache.nixos.org/
            trusted-public-keys = miyakomeow.cachix.org-1:85k7pjjK1Voo+kMHJx8w3nT1rlBow3+4/M+LsAuMCRY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=

      - name: Install required tools
        run: |
          # 安装通用工具（包括git用于提交）
          nix profile add nixpkgs#git nixpkgs#python3 nixpkgs#nix-update nixpkgs#bash

      - name: Update package
        id: update
        shell: bash
        run: |
          # 设置 Git 用户信息
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          # 准备执行环境变量（兼容不同脚本类型）
          export NIXPKGS_ALLOW_UNFREE=1
          export NIXPKGS_ALLOW_BROKEN=1
          export NIXPKGS_ALLOW_INSECURE=1

          echo "NIX_PATH=$NIX_PATH"

          # 创建唯一分支名
          timestamp=$(date +%s)
          branch_name="update/${{ matrix.package }}-$timestamp"
          echo "分支名称: $branch_name"

          # 使用临时HOME目录解决权限问题
          export ORI_HOME="$HOME"
          export HOME=$(mktemp -d)

          # 获取updateScript并处理不同类型
          echo "获取包 ${{ matrix.package }} 的updateScript"
          script_json=$(nix eval --impure --json ".#${{ matrix.package }}.updateScript")
          script_type=$(echo "$script_json" | jq -r 'type')

          # 函数：处理 nix-update 命令替换并执行
          execute_command_array() {
            local script_array=("$@")
            echo "执行更新命令(数组): ${script_array[@]}"

            # 检查是否需要替换 nix-update 命令
            if [[ "${script_array[0]}" =~ ^/nix/store/.*-nix-update.*bin/nix-update$ ]]; then
              echo "检测到 nix-update 路径，使用 nix-update 直接调用"

              # 构建新的命令数组，直接调用 nix-update 并保留其他参数
              local new_command=("nix-update")
              new_command+=("--flake")
              for ((i=1; i<${#script_array[@]}; i++)); do
                new_command+=("${script_array[$i]}")
              done
              echo "替换后的命令: ${new_command[@]}"
              "${new_command[@]}"
            else
              "${script_array[@]}"
            fi
          }

          # 根据不同类型执行命令
          case "$script_type" in
            "array")
              # 数组类型：直接执行
              script_array=($(echo "$script_json" | jq -r '.[]'))
              execute_command_array "${script_array[@]}"
              ;;
            "string")
              # 字符串类型：作为shell命令执行
              command_str=$(echo "$script_json" | jq -r '.')
              echo "执行更新命令(字符串): $command_str"
              bash -c "$command_str"
              ;;
            "object")
              # 属性集类型：提取command字段
              if echo "$script_json" | jq -e 'has("command")' >/dev/null; then
                command_type=$(echo "$script_json" | jq -r '.command | type')
                if [ "$command_type" = "array" ]; then
                  # 数组command：直接执行
                  script_array=($(echo "$script_json" | jq -r '.command[]'))
                  execute_command_array "${script_array[@]}"
                elif [ "$command_type" = "string" ]; then
                  # 字符串command：作为shell命令执行
                  command_str=$(echo "$script_json" | jq -r '.command')
                  echo "执行更新命令(属性集-字符串): $command_str"
                  bash -c "$command_str"
                else
                  echo "错误：不支持的command类型: $command_type"
                  exit 1
                fi
              else
                echo "错误：属性集缺少command字段"
                exit 1
              fi
              ;;
            *)
              echo "错误：未知的updateScript类型: $script_type"
              exit 1
              ;;
          esac

          # 恢复原始HOME并清理临时目录
          export TEMP_HOME="$HOME"
          export HOME="$ORI_HOME"
          rm -rf "$TEMP_HOME"

          # 检查是否有需要提交的更改
          if [ -n "$(git status --porcelain)" ]; then
              # 检测到更新，进行提交
              git add *
              git commit -m "updateScript: ${{ matrix.package }}"
              
              # 设置输出变量
              echo "has_update=true" >> $GITHUB_OUTPUT
              echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
              echo "更新完成: ${{ matrix.package }}"
          else
              # 没有检测到更新
              echo "has_update=false" >> $GITHUB_OUTPUT
              echo "没有更新: ${{ matrix.package }}"
          fi

      - name: Create Pull Request
        if: steps.update.outputs.has_update == 'true'
        id: create-pull-request
        uses: peter-evans/create-pull-request@v7
        with:
          branch: ${{ steps.update.outputs.branch_name }}
          base: main
          commit-message: "updateScript: 自动更新包 ${{ matrix.package }}"
          title: "Auto Update(updateScript): ${{ matrix.package }}"
          body: |
            由GitHub Actions自动更新包 ${{ matrix.package }}

            此更新由包的updateScript自动生成
          labels: automated, dependencies
          delete-branch: true
          token: ${{ secrets.AUTOMERGE_TOKEN }}
          # Act like github-actions
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>

      - name: Switch to update branch
        if: steps.update.outputs.has_update == 'true' && steps.create-pull-request.outputs.pull-request-operation == 'created'
        run: |
          echo "切换到更新分支: ${{ steps.update.outputs.branch_name }}"
          git checkout ${{ steps.update.outputs.branch_name }}

      - name: Setup Nix environment
        if: steps.update.outputs.has_update == 'true' && steps.create-pull-request.outputs.pull-request-operation == 'created'
        run: |
          echo "设置 Nix 环境变量"
          export NIXPKGS_ALLOW_UNFREE=1
          export NIXPKGS_ALLOW_BROKEN=1
          export NIXPKGS_ALLOW_INSECURE=1
          echo "NIXPKGS_ALLOW_UNFREE=1" >> $GITHUB_ENV
          echo "NIXPKGS_ALLOW_BROKEN=1" >> $GITHUB_ENV
          echo "NIXPKGS_ALLOW_INSECURE=1" >> $GITHUB_ENV

      - name: Validate package configuration
        if: steps.update.outputs.has_update == 'true' && steps.create-pull-request.outputs.pull-request-operation == 'created'
        run: |
          echo "验证包配置: ${{ matrix.package }}"
          nix eval .#${{ matrix.package }}

      - name: Build package with logs
        if: steps.update.outputs.has_update == 'true' && steps.create-pull-request.outputs.pull-request-operation == 'created'
        run: |
          echo "开始构建包: ${{ matrix.package }}"
          nix build .#${{ matrix.package }} --print-build-logs

      - name: Enable Pull Request Automerge
        if: steps.update.outputs.has_update == 'true' && steps.create-pull-request.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.AUTOMERGE_TOKEN }}
          pull-request-number: ${{ steps.create-pull-request.outputs.pull-request-number }}
          merge-method: merge

      - name: Delete source branch after merge
        if: steps.update.outputs.has_update == 'true' && steps.create-pull-request.outputs.pull-request-operation == 'created'
        run: |
          # 等待一段时间让PR合并完成
          sleep 10

          # 检查PR是否已合并
          PR_STATUS=$(gh api "repos/${{ github.repository }}/pulls/${{ steps.create-pull-request.outputs.pull-request-number }}" --jq '.merged')

          if [ "$PR_STATUS" = "true" ]; then
            echo "PR已合并，开始删除源分支"
            BRANCH_NAME="${{ steps.update.outputs.branch_name }}"

            # 删除分支
            gh api \
              --method DELETE \
              "repos/${{ github.repository }}/git/refs/heads/$BRANCH_NAME" \
              -H "Accept: application/vnd.github.v3+json" \
              || echo "分支 $BRANCH_NAME 删除失败或已不存在"

            echo "✅ 分支 $BRANCH_NAME 删除完成"
          else
            echo "PR尚未合并，跳过分支删除"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMERGE_TOKEN }}


