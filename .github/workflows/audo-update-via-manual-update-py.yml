name: Auto Update Packages via Manual "update.py"
on:
  schedule:
    - cron: "30 11 * * *" # 每天UTC时间11:30运行
  workflow_dispatch: # 允许手动触发

jobs:
  discover-update-scripts:
    name: Find update scripts
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find-scripts.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5

      - name: Find all update.py files
        id: find-scripts
        run: |
          # 查找所有update.py文件并生成有效的JSON矩阵
          find pkgs -name update.py -exec dirname {} \; | while read -r dir; do
            # 确保目录路径有效
            if [ -n "$dir" ]; then
              # 生成安全名称（替换特殊字符）
              name=$(echo "$dir" | sed 's/[^a-zA-Z0-9\\-]/→/g')
              # 创建JSON对象
              echo "{\"dir\":\"$dir\",\"name\":\"$name\"}"
            fi
          done | jq -s '{"include": .}' | tee matrix.json

          # 输出为单行JSON
          matrix_data=$(jq -c . matrix.json)
          echo "matrix=$matrix_data" >> $GITHUB_OUTPUT
          echo "Generated matrix: $matrix_data"

  validate-matrix:
    name: Validate Matrix
    needs: discover-update-scripts
    runs-on: ubuntu-latest
    steps:
      - name: Check matrix format
        run: |
          echo "Matrix content:"
          echo '${{ needs.discover-update-scripts.outputs.matrix }}'

          echo "Parsed JSON:"
          echo '${{ fromJson(needs.discover-update-scripts.outputs.matrix) }}'

  run-update:
    name: Update - ${{ matrix.name }}
    needs: discover-update-scripts
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover-update-scripts.outputs.matrix) }}
    outputs:
      pr_data: ${{ steps.collect-pr.outputs.pr_data }}
      has_changes: ${{ steps.check-changes.outputs.changes_detected }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # 获取完整历史记录

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python Deps
        run: |
          pip install requests

      - name: Run update script
        run: |
          cd "${{ matrix.dir }}"
          python ./update.py

      - name: Detect changes
        id: check-changes
        run: |
          cd "${{ matrix.dir }}"
          # 检查目录是否有变更
          if [ -n "$(git status --porcelain .)" ]; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and create PR
        id: create-pull-request
        if: steps.check-changes.outputs.changes_detected == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          branch: "auto-update/${{ matrix.name }}"
          base: main # 修改为目标分支（如main/master）
          commit-message: "chore(auto): update ${{ matrix.name }}"
          title: "Auto Update: ${{ matrix.name }}"
          body: "Automated update from update.py script"
          labels: automated, dependencies
          delete-branch: true
          token: ${{ secrets.AUTOMERGE_TOKEN }}
          # Act like github-actions
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>

      - name: Collect PR data
        if: steps.create-pull-request.outputs.pull-request-operation == 'created'
        run: |
          echo "pr_data={\"number\": \"${{ steps.create-pull-request.outputs.pull-request-number }}\", \"name\": \"${{ matrix.name }}\"}" >> $GITHUB_OUTPUT
        id: collect-pr

  wait-for-ci:
    needs: run-update
    if: needs.run-update.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CI completion
        run: |
          # 解析PR数据
          PR_DATA='${{ needs.run-update.outputs.pr_data }}'
          if [ -z "$PR_DATA" ] || [ "$PR_DATA" = "null" ]; then
            echo "没有PR数据，跳过等待"
            exit 0
          fi
          
          PR_NUMBER=$(echo "$PR_DATA" | jq -r '.number')
          NAME=$(echo "$PR_DATA" | jq -r '.name')
          
          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "无效的PR编号"
            exit 1
          fi
          
          echo "等待PR #$PR_NUMBER ($NAME) 的CI完成"
          
          # 等待CI完成
          MAX_WAIT=1800  # 30分钟超时
          WAIT_TIME=0
          
          while [ $WAIT_TIME -lt $MAX_WAIT ]; do
            # 获取PR的提交SHA
            HEAD_SHA=$(gh api "repos/${{ github.repository }}/pulls/$PR_NUMBER" --jq '.head.sha')
            
            # 获取该提交的所有检查
            CHECK_RUNS=$(gh api "repos/${{ github.repository }}/commits/$HEAD_SHA/check-runs" --jq '.check_runs')
            
            # 检查状态
            TOTAL_CHECKS=$(echo "$CHECK_RUNS" | jq length)
            COMPLETED_CHECKS=$(echo "$CHECK_RUNS" | jq '[.[] | select(.status == "completed")] | length')
            FAILED_CHECKS=$(echo "$CHECK_RUNS" | jq '[.[] | select(.conclusion == "failure" or .conclusion == "cancelled" or .conclusion == "timed_out")] | length')
            
            echo "检查状态: $COMPLETED_CHECKS/$TOTAL_CHECKS 已完成"
            
            # 如果有失败的检查，退出
            if [ "$FAILED_CHECKS" -gt 0 ]; then
              echo "发现失败的检查，停止等待"
              FAILED_NAMES=$(echo "$CHECK_RUNS" | jq -r '.[] | select(.conclusion == "failure" or .conclusion == "cancelled" or .conclusion == "timed_out") | .name')
              echo "失败的检查: $FAILED_NAMES"
              exit 1
            fi
            
            # 如果所有检查都完成，退出循环
            if [ "$COMPLETED_CHECKS" -eq "$TOTAL_CHECKS" ] && [ "$TOTAL_CHECKS" -gt 0 ]; then
              echo "所有CI检查已完成"
              break
            fi
            
            echo "等待CI完成... (已等待 ${WAIT_TIME}s)"
            sleep 30
            WAIT_TIME=$((WAIT_TIME + 30))
          done
          
          if [ $WAIT_TIME -ge $MAX_WAIT ]; then
            echo "等待CI超时"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  enable-automerge:
    needs: [run-update, wait-for-ci]
    if: needs.wait-for-ci.result == 'success' && needs.run-update.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Enable Pull Request Automerge
        run: |
          # 解析PR数据
          PR_DATA='${{ needs.run-update.outputs.pr_data }}'
          PR_NUMBER=$(echo "$PR_DATA" | jq -r '.number')
          NAME=$(echo "$PR_DATA" | jq -r '.name')
          
          echo "启用PR #$PR_NUMBER ($NAME) 的自动合并"
          
          # 启用自动合并
          gh pr merge "$PR_NUMBER" --auto --merge
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMERGE_TOKEN }}
