name: Auto Update Packages via nixpkgs-update
on:
  schedule:
    - cron: "0 12 * * 0" # 每周日 UTC 12:00 运行
  workflow_dispatch: # 允许手动触发

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            substituters = https://nix-community.cachix.org/ https://cache.nixos.org/
            trusted-public-keys = nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=

      - name: Install dependencies
        run: |
          # 安装必要工具
          nix profile install nixpkgs#parallel nixpkgs#curl

          # 安装 nixpkgs-update
          nix run github:ryantm/nixpkgs-update -- --help >/dev/null

      - name: Find packages with updateScript
        run: |
          # 查找所有包含 updateScript 定义的包
          find pkgs -type f -name '*.nix' | while read -r file; do
            # 使用更健壮的检测逻辑
            if grep -q -E 'passthru.*updateScript|updateScript.*=' "$file"; then
              # 提取包名 (从目录名)
              pkgname=$(dirname "$file" | xargs basename)
              echo "$pkgname"
            fi
          done | sort -u > package-list.txt

          echo "找到 $(wc -l < package-list.txt) 个需要更新的包:"
          cat package-list.txt
          echo "::set-output name=package_count::$(wc -l < package-list.txt)"

      - name: Run updates in parallel
        id: update-run
        run: |
          # 设置 Git 用户信息
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          # 创建并行任务文件
          echo "#!/usr/bin/env bash" > update-script.sh
          echo "set -euo pipefail" >> update-script.sh
          echo "pkg=\$1" >> update-script.sh
          echo "echo \"尝试更新: \$pkg\"" >> update-script.sh
          echo "nix run github:ryantm/nixpkgs-update -- update --package \"\$pkg\" --commit || echo \"更新 \$pkg 失败\"" >> update-script.sh
          chmod +x update-script.sh

          # 使用 GNU Parallel 并行运行
          parallel --halt soon,fail=1 --joblog joblog.txt -j 4 ./update-script.sh :::: package-list.txt

          # 统计成功/失败数量
          success_count=$(grep -c "Finished update" joblog.txt || true)
          fail_count=$(($(wc -l < package-list.txt) - success_count))
          echo "::set-output name=success_count::$success_count"
          echo "::set-output name=fail_count::$fail_count"

      - name: Create PR if changes
        if: steps.update-run.outputs.success_count != '0'
        id: create-pull-request
        uses: peter-evans/create-pull-request@v7
        with:
          branch: nix-updates-$(date +%s)
          base: main
          commit-message: "nix-update: 自动包更新"
          title: "自动包更新 (${{ steps.update-run.outputs.success_count }} 个包)"
          body: |
            ## 更新结果
            ✅ 成功更新: ${{ steps.update-run.outputs.success_count }} 个包
            ❌ 失败更新: ${{ steps.update-run.outputs.fail_count }} 个包

            ### 更新日志
            <details>
            <summary>点击查看详情</summary>

            ```log
            $(cat joblog.txt || echo "无更新日志")
            ```
            </details>

            由 GitHub Actions 自动生成
          labels: automated, dependencies
          delete-branch: true
          token: ${{ secrets.AUTOMERGE_TOKEN }}
          # Act like github-actions
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>

      - name: No updates notification
        if: steps.update-run.outputs.success_count == '0'
        run: |
          echo "没有包需要更新"
          # 可选: 添加通知逻辑

      - name: Enable Pull Request Automerge
        if: steps.create-pull-request.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.AUTOMERGE_TOKEN }}
          pull-request-number: ${{ steps.create-pull-request.outputs.pull-request-number }}
          merge-method: squash
