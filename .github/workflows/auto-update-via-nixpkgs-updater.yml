name: Auto Update Packages via nix-update
on:
  schedule:
    - cron: "0 12 * * *" # 每天 UTC 中午12点运行
  workflow_dispatch: # 允许手动触发

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      package_list: ${{ steps.package-list.outputs.package_list }}
      package_count: ${{ steps.package-list.outputs.package_count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            substituters = https://nix-community.cachix.org/ https://cache.nixos.org/
            trusted-public-keys = nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=

      - name: Install dependencies
        run: |
          # 安装必要工具
          nix profile install nixpkgs#curl nixpkgs#jq

      - name: Find packages with updateScript
        id: package-list
        run: |
          # 使用Nix内置方法检测updateScript
          export NIXPKGS_ALLOW_UNFREE=1
          nix eval --impure --json .#packages.x86_64-linux --apply 'builtins.attrNames' | jq -r '.[]' > all-packages.txt

          # 创建空包列表文件
          echo "" > package-list.txt

          # 过滤出有updateScript的包
          while IFS= read -r pkg; do
            # 尝试获取updateScript
            set +e
            script_output=$(nix eval --impure --json ".#${pkg}.updateScript" 2>/tmp/error.log)
            ret=$?
            set -e
            
            if [ $ret -ne 0 ]; then
              continue
            fi
            
            # 检查输出是否为有效的updateScript
            if ! echo "$script_output" | jq -e 'type == "array" and length > 0' >/dev/null; then
              continue
            fi
            
            # 提取第一个元素并检查是否包含nix-update
            first_element=$(echo "$script_output" | jq -r '.[0]')
            
            # 检查是否以/nix-update结尾（考虑路径变化）
            if [[ "$first_element" == */nix-update || "$first_element" == */nix-update-* ]]; then
              echo "$pkg" >> package-list.txt
            fi
          done < all-packages.txt

          # 输出包列表和数量
          echo "找到 $(wc -l < package-list.txt) 个需要更新的包:"
          cat package-list.txt

          # 设置输出变量
          echo "package_list=$(cat package-list.txt | jq -R -s -c 'split("\n") | map(select(. != ""))')" >> $GITHUB_OUTPUT
          echo "package_count=$(wc -l < package-list.txt | awk '{print $1}')" >> $GITHUB_OUTPUT

  update-package:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.prepare.outputs.package_list) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            substituters = https://nix-community.cachix.org/ https://cache.nixos.org/
            trusted-public-keys = nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=

      - name: Install nix-update
        run: nix profile install nixpkgs#nix-update nixpkgs#git

      - name: Update package
        id: update
        run: |
          # 设置 Git 用户信息
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          # 创建唯一分支名
          timestamp=$(date +%s)
          branch_name="update/${{ matrix.package }}-$timestamp"
          echo "分支名称: $branch_name"

          # 创建新分支
          git checkout -b "$branch_name"

          # 使用临时HOME目录解决权限问题
          export ORI_HOME="$HOME"
          export HOME=$(mktemp -d)

          # 运行更新
          echo "开始更新包: ${{ matrix.package }}"
          nix-update "${{ matrix.package }}" --flake

          # 恢复原始HOME并清理临时目录
          export TEMP_HOME="$HOME"
          export HOME="$ORI_HOME"
          rm -rf "$TEMP_HOME"

          # 检查是否有需要提交的更改
          if [ -n "$(git status --porcelain)" ]; then
              # 检测到更新，进行提交
              git add *
              git commit --message="nix-update: ${{ matrix.package }}"
              
              # 设置输出变量
              echo "has_update=true" >> $GITHUB_OUTPUT
              echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
              echo "更新完成: ${{ matrix.package }}"
          else
              # 没有检测到更新
              echo "has_update=false" >> $GITHUB_OUTPUT
              echo "没有更新: ${{ matrix.package }}"
          fi

      - name: Create Pull Request
        if: steps.update.outputs.has_updates == 'true'
        id: create-pull-request
        uses: peter-evans/create-pull-request@v7
        with:
          branch: ${{ steps.update-step.outputs.branch_name }}
          base: main
          commit-message: "nix-update: 自动更新包 ${{ matrix.package }}"
          title: "自动更新包: ${{ matrix.package }}"
          body: |
            由GitHub Actions自动更新包 ${{ matrix.package }}

            此更新由nix-update工具自动生成
          labels: automated, dependencies
          delete-branch: true
          token: ${{ secrets.AUTOMERGE_TOKEN }}
          # Act like github-actions
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>

      - name: Enable Pull Request Automerge
        if: steps.create-pull-request.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.AUTOMERGE_TOKEN }}
          pull-request-number: ${{ steps.create-pull-request.outputs.pull-request-number }}
          merge-method: squash
