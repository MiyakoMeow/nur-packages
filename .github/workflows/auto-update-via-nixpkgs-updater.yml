name: Auto Update Packages via nixpkgs-update
on:
  schedule:
    - cron: "0 12 * * 0" # 每周日 UTC 12:00 运行
  workflow_dispatch: # 允许手动触发

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            substituters = https://nix-community.cachix.org/ https://cache.nixos.org/
            trusted-public-keys = nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=

      - name: Generate update list
        run: |
          # 创建缓存目录
          mkdir -p ~/.cache/nixpkgs-update

          # 使用正确的引用方式运行 nixpkgs-update
          nix run github:ryantm/nixpkgs-update -- update-list --output ~/.cache/nixpkgs-update/update-list

          # 改进的包检测：支持多行定义和不同文件结构
          find pkgs -type f -name '*.nix' | while read -r file; do
            # 检查文件中是否有 updateScript 定义
            if grep -q -E 'passthru.*updateScript|updateScript.*=' "$file"; then
              # 从文件路径提取包名（支持多种目录结构）
              pkgname=$(dirname "$file" | xargs basename)
              echo "$pkgname"
            fi
          done | sort -u > our-packages.txt

          # 取交集：需要更新且在我们仓库中的包
          grep -F -f our-packages.txt ~/.cache/nixpkgs-update/update-list > to-update.txt || true

          echo "检测到的包:"
          cat our-packages.txt
          echo "需要更新的包:"
          cat to-update.txt
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMERGE_TOKEN }}

      - name: Run updates
        run: |
          # 确保创建提交的用户信息
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          # 并行运行更新
          if [ -s to-update.txt ]; then
            cat to-update.txt | xargs -P 4 -I {} sh -c \
              "echo '更新包: {}'; nix run github:ryantm/nixpkgs-update -- --package {} --commit || echo '更新 {} 失败'"
            echo "::set-output name=has_updates::true" # 设置输出变量
          else
            echo "没有需要更新的包"
            echo "::set-output name=has_updates::false" # 设置输出变量
          fi

      - name: Create PR if changes
        if: steps.update.outputs.has_updates == 'true'
        id: create-pull-request
        uses: peter-evans/create-pull-request@v7
        with:
          title: "chore: auto-update packages via nixpkgs-update $(date +'%Y-%m-%d')"
          branch: "auto-update-${{ steps.timestamp.outputs.timestamp }}"
          delete-branch: true
          body: |
            本次更新包含以下包:
            $(cat to-update.txt | sed 's/^/- /' || echo "无更新")

            由 GitHub Actions 自动生成
          labels: "automated, dependencies"
          token: ${{ secrets.AUTOMERGE_TOKEN }}
          # Act like github-actions
          commit-message: "chore: auto-update packages"
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>

      - name: Enable Pull Request Automerge
        if: steps.create-pull-request.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.AUTOMERGE_TOKEN }}
          pull-request-number: ${{ steps.create-pull-request.outputs.pull-request-number }}
          merge-method: squash
